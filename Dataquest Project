{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Guided Project: Exploring Hacker News Posts\n",
    "\n",
    "In this project I will ask the questions. Do Ask HN or Show HN recieve more comments on average? and Do posts created at certain time recieve more comments on average?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at'],\n",
       " ['12224879',\n",
       "  'Interactive Dynamic Video',\n",
       "  'http://www.interactivedynamicvideo.com/',\n",
       "  '386',\n",
       "  '52',\n",
       "  'ne0phyte',\n",
       "  '8/4/2016 11:52'],\n",
       " ['10975351',\n",
       "  'How to Use Open Source and Shut the Fuck Up at the Same Time',\n",
       "  'http://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/',\n",
       "  '39',\n",
       "  '10',\n",
       "  'josep2',\n",
       "  '1/26/2016 19:30'],\n",
       " ['11964716',\n",
       "  \"Florida DJs May Face Felony for April Fools' Water Joke\",\n",
       "  'http://www.thewire.com/entertainment/2013/04/florida-djs-april-fools-water-joke/63798/',\n",
       "  '2',\n",
       "  '1',\n",
       "  'vezycash',\n",
       "  '6/23/2016 22:20'],\n",
       " ['11919867',\n",
       "  'Technology ventures: From Idea to Enterprise',\n",
       "  'https://www.amazon.com/Technology-Ventures-Enterprise-Thomas-Byers/dp/0073523429',\n",
       "  '3',\n",
       "  '1',\n",
       "  'hswarna',\n",
       "  '6/17/2016 0:01']]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read data\n",
    "import csv\n",
    "hn = open('hacker_news.csv')\n",
    "hn = list(csv.reader(hn))\n",
    "hn[:5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at']\n",
      "[['12224879', 'Interactive Dynamic Video', 'http://www.interactivedynamicvideo.com/', '386', '52', 'ne0phyte', '8/4/2016 11:52'], ['10975351', 'How to Use Open Source and Shut the Fuck Up at the Same Time', 'http://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/', '39', '10', 'josep2', '1/26/2016 19:30'], ['11964716', \"Florida DJs May Face Felony for April Fools' Water Joke\", 'http://www.thewire.com/entertainment/2013/04/florida-djs-april-fools-water-joke/63798/', '2', '1', 'vezycash', '6/23/2016 22:20'], ['11919867', 'Technology ventures: From Idea to Enterprise', 'https://www.amazon.com/Technology-Ventures-Enterprise-Thomas-Byers/dp/0073523429', '3', '1', 'hswarna', '6/17/2016 0:01'], ['10301696', 'Note by Note: The Making of Steinway L1037 (2007)', 'http://www.nytimes.com/2007/11/07/movies/07stein.html?_r=0', '8', '2', 'walterbell', '9/30/2015 4:12']]\n"
     ]
    }
   ],
   "source": [
    "# removing headers from list \n",
    "headers = hn[0]\n",
    "hn = hn[1:]\n",
    "print(headers)\n",
    "print(hn[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1744\n",
      "1162\n",
      "17194\n"
     ]
    }
   ],
   "source": [
    "# identifying the posts that begin with \"ask hn\", \"show hn\", and\n",
    "# seprating the data in different lists\n",
    "ask_posts = []\n",
    "show_posts = []\n",
    "other_posts = []\n",
    "\n",
    "for post in hn:\n",
    "    title = post[1]\n",
    "    if title.lower().startswith(\"ask hn\"):\n",
    "        ask_posts.append(post)\n",
    "    elif title.lower().startswith(\"show hn\"):\n",
    "        show_posts.append(post)\n",
    "    else:\n",
    "        other_posts.append(post)\n",
    "print(len(ask_posts))\n",
    "print(len(show_posts))\n",
    "print(len(other_posts))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.038417431192661\n"
     ]
    }
   ],
   "source": [
    "# Calculate the average number of comments for \"Ask HN \n",
    "total_ask_comments = 0\n",
    "\n",
    "for post in ask_posts:\n",
    "    total_ask_comments += int(post[4])\n",
    "avg_ask_comments = total_ask_comments / len(ask_posts)\n",
    "print(avg_ask_comments)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.31669535283993\n"
     ]
    }
   ],
   "source": [
    "# Calculate the average nuber of comments for \"Show HN posts\n",
    "\n",
    "total_show_comments = 0\n",
    "\n",
    "for post in  show_posts:\n",
    "    total_show_comments += int(post[4])\n",
    "avg_show_comments = total_show_comments / len(show_posts)\n",
    "print(avg_show_comments)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On average total ask comments recieve 14 compared to 10 for total show comments. We will focus on the ask comments since there is more of a reponse on there comments.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'17': 1146, '16': 1814, '02': 1381, '13': 1253, '11': 641, '14': 1416, '05': 464, '03': 421, '00': 447, '10': 793, '19': 1188, '04': 337, '15': 4477, '21': 1745, '01': 683, '08': 492, '22': 479, '06': 397, '12': 687, '18': 1439, '20': 1722, '09': 251, '07': 267, '23': 543}\n"
     ]
    }
   ],
   "source": [
    "# calcuate the amount of Ask post and comments by hour\n",
    "import datetime as dt\n",
    "\n",
    "result_list = []\n",
    "\n",
    "for post in ask_posts:\n",
    "    result_list.append([post[6], int(post[4])])\n",
    "    \n",
    "counts_by_hour = {}\n",
    "comments_by_hour = {}\n",
    "date_format = \"%m/%d/%Y %H:%M\"\n",
    "\n",
    "for each_row in result_list:\n",
    "    date = each_row[0]\n",
    "    comment = each_row[1]\n",
    "    time = dt.datetime.strptime(date,date_format).strftime(\"%H\")\n",
    "    \n",
    "    if time not in counts_by_hour:\n",
    "        counts_by_hour[time] = 1\n",
    "        comments_by_hour[time] = comment\n",
    "    else:\n",
    "        counts_by_hour[time] += 1\n",
    "        comments_by_hour[time] += comment\n",
    "print(comments_by_hour)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['17', 11.46],\n",
       " ['16', 16.796296296296298],\n",
       " ['02', 23.810344827586206],\n",
       " ['13', 14.741176470588234],\n",
       " ['11', 11.051724137931034],\n",
       " ['14', 13.233644859813085],\n",
       " ['05', 10.08695652173913],\n",
       " ['03', 7.796296296296297],\n",
       " ['00', 8.127272727272727],\n",
       " ['10', 13.440677966101696],\n",
       " ['19', 10.8],\n",
       " ['04', 7.170212765957447],\n",
       " ['15', 38.5948275862069],\n",
       " ['21', 16.009174311926607],\n",
       " ['01', 11.383333333333333],\n",
       " ['08', 10.25],\n",
       " ['22', 6.746478873239437],\n",
       " ['06', 9.022727272727273],\n",
       " ['12', 9.41095890410959],\n",
       " ['18', 13.20183486238532],\n",
       " ['20', 21.525],\n",
       " ['09', 5.5777777777777775],\n",
       " ['07', 7.852941176470588],\n",
       " ['23', 7.985294117647059]]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the average number of comments for Ask HN post by Hour\n",
    "\n",
    "avg_by_hour = []\n",
    "\n",
    "for hr in comments_by_hour:\n",
    "    avg_by_hour.append([hr, comments_by_hour[hr] / counts_by_hour[hr]])\n",
    "avg_by_hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11.46, '17']]\n",
      "[[11.46, '17'], [16.796296296296298, '16']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06'], [9.41095890410959, '12']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06'], [9.41095890410959, '12'], [13.20183486238532, '18']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06'], [9.41095890410959, '12'], [13.20183486238532, '18'], [21.525, '20']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06'], [9.41095890410959, '12'], [13.20183486238532, '18'], [21.525, '20'], [5.5777777777777775, '09']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06'], [9.41095890410959, '12'], [13.20183486238532, '18'], [21.525, '20'], [5.5777777777777775, '09'], [7.852941176470588, '07']]\n",
      "[[11.46, '17'], [16.796296296296298, '16'], [23.810344827586206, '02'], [14.741176470588234, '13'], [11.051724137931034, '11'], [13.233644859813085, '14'], [10.08695652173913, '05'], [7.796296296296297, '03'], [8.127272727272727, '00'], [13.440677966101696, '10'], [10.8, '19'], [7.170212765957447, '04'], [38.5948275862069, '15'], [16.009174311926607, '21'], [11.383333333333333, '01'], [10.25, '08'], [6.746478873239437, '22'], [9.022727272727273, '06'], [9.41095890410959, '12'], [13.20183486238532, '18'], [21.525, '20'], [5.5777777777777775, '09'], [7.852941176470588, '07'], [7.985294117647059, '23']]\n",
      "[[38.5948275862069, '15'], [23.810344827586206, '02'], [21.525, '20'], [16.796296296296298, '16'], [16.009174311926607, '21'], [14.741176470588234, '13'], [13.440677966101696, '10'], [13.233644859813085, '14'], [13.20183486238532, '18'], [11.46, '17'], [11.383333333333333, '01'], [11.051724137931034, '11'], [10.8, '19'], [10.25, '08'], [10.08695652173913, '05'], [9.41095890410959, '12'], [9.022727272727273, '06'], [8.127272727272727, '00'], [7.985294117647059, '23'], [7.852941176470588, '07'], [7.796296296296297, '03'], [7.170212765957447, '04'], [6.746478873239437, '22'], [5.5777777777777775, '09']]\n"
     ]
    }
   ],
   "source": [
    "# sorting and printing Values from list of lists\n",
    "\n",
    "swap_avg_by_hour = []\n",
    "\n",
    "for row in avg_by_hour:\n",
    "    swap_avg_by_hour.append([row[1], row[0]])\n",
    "    print(swap_avg_by_hour)\n",
    "\n",
    "sorted_swap = sorted(swap_avg_by_hour, reverse=True)\n",
    "\n",
    "print(sorted_swap)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 Hours for 'Ask HN' Comments\n",
      "15:00:38.59 average comments per post\n",
      "02:00:23.81 average comments per post\n",
      "20:00:21.52 average comments per post\n",
      "16:00:16.80 average comments per post\n",
      "21:00:16.01 average comments per post\n"
     ]
    }
   ],
   "source": [
    "# sort the values and print the top 5 hours with the most ask comments\n",
    "print(\"Top 5 Hours for 'Ask HN' Comments\")\n",
    "\n",
    "for avg, hr in sorted_swap[:5]:\n",
    "    print(\"{}:{:.2f} average comments per post\".format(dt.datetime.strptime(hr,\"%H\").strftime(\"%H:%M\"), avg))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "The hour that recieve the most comments is at 15:00 time mark with 38.59 comments 60% percent more then from the highest to the lowest comment. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "\n",
    "In this project, we analyzed ask posts and show posts to determine which type of post and time receive the most comments on average. Based on our analysis, to maximize the amount of comments a post receives, we’d recommend the post be categorized as ask post and created between 15:00 and 16:00 (3:00 pm est - 4:00 pm est).\n",
    "\n",
    "However, it should be noted that the data set we analyzed excluded posts without any comments. Given that, it’s more accurate to say that of the posts that received comments, ask posts received more comments on average and ask posts created between 15:00 and 16:00 (3:00 pm est - 4:00 pm est) received the most comments on average."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
